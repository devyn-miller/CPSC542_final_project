{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **Final Project**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Imports'''\n",
    "from src.preprocessing import preprocess\n",
    "from src.training import get_best_model\n",
    "from src.validation import Validator\n",
    "from src.prediction import Predictor"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## **Preprocessing and Augmentation**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Calls Preprocessing functions'''\n",
    "# Set the batch size according to your system's capabilities\n",
    "BATCH_SIZE = 8\n",
    "\n",
    "# Call the preprocess function\n",
    "stack = preprocess(BATCH_SIZE)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## **Training**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Calls training functions'''\n",
    "stack = get_best_model(stack)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## **Prediction**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Calls prediction fucntions in prediction.py and methods from result'''\n",
    "predictor = Predictor(model_path='path/to/saved/model')\n",
    "input_data = 'path/to/input/data'\n",
    "predictions = predictor.predict(input_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## **Validation**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Calls the validation fuctions in validation.py and methods from result'''\n",
    "validator = Validator(model_path='path/to/saved/model')\n",
    "validation_data = 'path/to/validation/data'\n",
    "evaluation_metrics = validator.validate(validation_data)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}




absl-py==2.1.0
astunparse==1.6.3
certifi==2024.2.2
charset-normalizer==3.3.2
contourpy==1.2.0
cycler==0.12.1
flatbuffers==24.3.7
fonttools==4.50.0
gast==0.5.4
google-pasta==0.2.0
grpcio==1.62.1
h5py==3.10.0
idna==3.6
keras==3.1.1
keras-tuner==1.4.7
kiwisolver==1.4.5
kt-legacy==1.0.5
libclang==18.1.1
Markdown==3.6
markdown-it-py==3.0.0
MarkupSafe==2.1.5
matplotlib==3.8.3
mdurl==0.1.2
ml-dtypes==0.3.2
namex==0.0.7
numpy==1.26.4
opt-einsum==3.3.0
optree==0.11.0
packaging==24.0
pillow==10.2.0
protobuf==4.25.3
Pygments==2.17.2
pyparsing==3.1.2
python-dateutil==2.9.0.post0
requests==2.31.0
rich==13.7.1
six==1.16.0
tensorboard==2.16.2
tensorboard-data-server==0.7.2
tensorflow==2.16.1
tensorflow-io-gcs-filesystem==0.36.0
termcolor==2.4.0
typing_extensions==4.10.0
urllib3==2.2.1
Werkzeug==3.0.1
wrapt==1.16.0


---
runme:
  id: 01HSVVGQ6R93E1HD56WPZ3346G
  version: v3
---

# **Video Colorization Project**

This repository contains code and documentation for our Video Colorization Project.

### Proposed timeline:

April 12 (3 weeks from today): individual pipelines developed; models trained

April 19: training on all data completed; numbers 1-6 in the assignment paper/presentation content written in report

April 26: Rough draft of final report completed with feedback from Caitlyn and/or LaHaye; somewhat decent GUI

May 3: final report completed with subsequent slides based on feedback; GUI finalized

May 3-presentation date: practice presenting, refine as necessary

I was thinking we could set up meetings for each of these checkpoints with further communication as needed. This is just a suggestion so if anyone else has other preferences that’s totally cool as well!


-devyn :,)

## Workspace Setup

```CPSC542_FINAL_PROJECT
├── clips
├── data
│   └── .txt
├── docs
│   └── .txt
├── gray_clips
├── src
│   ├── models
│   │   └── .txt
│   ├── objects
│   │   ├── architecture
│   │   │   └── conv_autoencoder.py
│   │   ├── __init__.py
│   │   ├── data.py
│   │   ├── result.py
│   │   └── stack.py
│   ├── __init__.py
│   ├── augmentation.py
│   ├── prediction.py
│   ├── preprocessing.py
│   ├── training.py
│   └── validation.py
├── .gitignore
├── CONTRIBUTING.md
├── main.ipynb
├── readme.md
└── requirements.txt
```
Here's a brief explanation of each file and its role in the project:

- **`readme.md`**
  - Provides an overview of the Video Colorization Project, including a proposed timeline and contributor names.

- **`CONTRIBUTING.md`**
  - Outlines guidelines for contributing to the project, such as branch usage, commit message expectations, and pull request requirements.

- **`main.ipynb`**
  - A Jupyter notebook that serves as the main workspace for the project. It includes sections for preprocessing and augmentation, training, prediction, and validation.

- **`src/training.py`**
  - Contains functions for model training and evaluation. It includes a tuner for hyperparameter optimization (`run_tuner`) and a method for training the best model (`get_best_model`). Additionally, it provides a function to evaluate model performance and plot training history.

- **`src/augmentation.py`**
  - Defines an `ImageAugmenter` class responsible for augmenting images. It includes a placeholder method (`augment`) where augmentation techniques can be implemented.

- **`src/objects/stack.py`**
  - Defines a `Stack` class that encapsulates data, model architecture, and results. It includes methods for updating datasets, creating models, and saving the final model and its training history.

- **`src/objects/architecture/conv_autoencoder.py`**
  - Placeholder for the `ConvAutoencoder` class, intended to define the architecture of a convolutional autoencoder model.

- **`src/objects/data.py`**
  - Defines a `Data` class that holds datasets (training, testing, validation) and includes a method for updating these datasets.

- **`src/objects/result.py`**
  - Placeholder for the `Result` class, intended for handling predictions, validation, and visualization tasks such as generating diagrams or applying techniques like GradCAM.

## Contributors

### - Hayden Fargo

### - Tyler Lewis

### - Devyn Miller

### - Ponthea Zahraii




{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "# Define the directory to start the traversal\n",
    "project_directory = '/Users/devynmiller/CPSC542_final_project'\n",
    "\n",
    "# Define the output file where the code contents will be written\n",
    "output_file_path = 'code_contents.txt'\n",
    "\n",
    "# Open the output file in write mode\n",
    "with open(output_file_path, 'w') as output_file:\n",
    "    # Walk through the project directory\n",
    "    for root, dirs, files in os.walk(project_directory):\n",
    "        for file_name in files:\n",
    "            # Construct the full file path\n",
    "            file_path = os.path.join(root, file_name)\n",
    "            # Open and read the contents of the file\n",
    "            with open(file_path, 'r') as file:\n",
    "                try:\n",
    "                    # Read the contents of the file\n",
    "                    contents = file.read()\n",
    "                    # Write the contents to the output file\n",
    "                    output_file.write(contents)\n",
    "                    # Optionally, write a separator between files' contents\n",
    "                    output_file.write('\\n\\n')\n",
    "                except Exception as e:\n",
    "                    # Handle exceptions (e.g., if the file cannot be read)\n",
    "                    print(f\"Could not read file {file_path}: {e}\")\n",
    "\n",
    "print(f\"Code contents have been written to {output_file_path}\")"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}


### Branches
- use ur own branch

### Commit
- please have meaningful commit msgs

### Pull Requests
- require 2 or more approvals


[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote "origin"]
	url = https://github.com/devyn-miller/CPSC542_final_project.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main
	github-pr-owner-number = "devyn-miller#CPSC542_final_project#8"
[branch "devyn"]
	remote = origin
	merge = refs/heads/devyn
	github-pr-owner-number = "devyn-miller#CPSC542_final_project#10"


ref: refs/heads/devyn


Unnamed repository; edit this file 'description' to name the repository.


# pack-refs with: peeled fully-peeled sorted 
a6a6ba345d32f9b52bf61423192822f4c94c7702 refs/remotes/origin/byteme
c513330669d940c88e99616b8b7e71699964dea1 refs/remotes/origin/devyn
21e833b3a8732ed7ae9006ca3c0f88741e8cebcc refs/remotes/origin/hayden
73af398754ceb3cbc0870a55e37ce28cfd52c193 refs/remotes/origin/main
2e2bf335f0b2a325fcb5e3aee2ad7edfdf9b7280 refs/remotes/origin/tyler


write basic convautoencoder class


a98b122bee49aba76a9d7a27c31b4612d5aa5a05		branch 'devyn' of https://github.com/devyn-miller/CPSC542_final_project
a6a6ba345d32f9b52bf61423192822f4c94c7702	not-for-merge	branch 'byteme' of https://github.com/devyn-miller/CPSC542_final_project
21e833b3a8732ed7ae9006ca3c0f88741e8cebcc	not-for-merge	branch 'hayden' of https://github.com/devyn-miller/CPSC542_final_project
dba3e8d52b24df91258d48ffb108a71797bf4c33	not-for-merge	branch 'main' of https://github.com/devyn-miller/CPSC542_final_project
2e2bf335f0b2a325fcb5e3aee2ad7edfdf9b7280	not-for-merge	branch 'tyler' of https://github.com/devyn-miller/CPSC542_final_project


# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~


0000000000000000000000000000000000000000 73af398754ceb3cbc0870a55e37ce28cfd52c193 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711408154 -0700	clone: from https://github.com/devyn-miller/CPSC542_final_project.git
73af398754ceb3cbc0870a55e37ce28cfd52c193 c513330669d940c88e99616b8b7e71699964dea1 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711408270 -0700	checkout: moving from main to devyn
c513330669d940c88e99616b8b7e71699964dea1 e9a79af05890f056314765d1e17849e4d2d8c4cf devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711408568 -0700	commit: updated readme to include project structure and short descriptions; placeholders are indicated, so descriptions = tentative
e9a79af05890f056314765d1e17849e4d2d8c4cf 23b48ecb9586c4068057c75c8d33b176da95a885 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711408610 -0700	commit: add requirements in requirements.txt
23b48ecb9586c4068057c75c8d33b176da95a885 0c925e8dff3a07f1b0b183e4ca56180d6c15c170 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711409116 -0700	commit: fixed a typo in import statement
0c925e8dff3a07f1b0b183e4ca56180d6c15c170 8a0fddf0539966d42683f8350de8d3ca34ac91fa devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711500057 -0700	commit: modified init files for eeasy references within src and src/objects
8a0fddf0539966d42683f8350de8d3ca34ac91fa 93e8d471761b5ec561a09abdc15339516b917186 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711917619 -0700	commit: process_video function
93e8d471761b5ec561a09abdc15339516b917186 96903059606c131f49b983ea24397d1bdab961f5 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711918038 -0700	commit: added functions to Result class
96903059606c131f49b983ea24397d1bdab961f5 510a3850da7a8182b3c0e84ab3d9f050e4154559 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711918364 -0700	commit: is changed to ==. ensures that the comparison checks if the value of model_type is equal to the string 'ConvAutoencoder', regardless of whether they are the same object in memory
510a3850da7a8182b3c0e84ab3d9f050e4154559 c636e1a4221e9e16c61b49050df51194140b76b9 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711919238 -0700	commit: actually called functions in main
c636e1a4221e9e16c61b49050df51194140b76b9 e70ae1f38ac740b8b6455e0c45c77dbb9778c350 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711919437 -0700	commit: create_model updated
e70ae1f38ac740b8b6455e0c45c77dbb9778c350 a98b122bee49aba76a9d7a27c31b4612d5aa5a05 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711919564 -0700	commit: write basic convautoencoder class


0000000000000000000000000000000000000000 73af398754ceb3cbc0870a55e37ce28cfd52c193 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711408154 -0700	clone: from https://github.com/devyn-miller/CPSC542_final_project.git


0000000000000000000000000000000000000000 c513330669d940c88e99616b8b7e71699964dea1 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711408270 -0700	branch: Created from refs/remotes/origin/devyn
c513330669d940c88e99616b8b7e71699964dea1 e9a79af05890f056314765d1e17849e4d2d8c4cf devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711408568 -0700	commit: updated readme to include project structure and short descriptions; placeholders are indicated, so descriptions = tentative
e9a79af05890f056314765d1e17849e4d2d8c4cf 23b48ecb9586c4068057c75c8d33b176da95a885 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711408610 -0700	commit: add requirements in requirements.txt
23b48ecb9586c4068057c75c8d33b176da95a885 0c925e8dff3a07f1b0b183e4ca56180d6c15c170 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711409116 -0700	commit: fixed a typo in import statement
0c925e8dff3a07f1b0b183e4ca56180d6c15c170 8a0fddf0539966d42683f8350de8d3ca34ac91fa devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711500057 -0700	commit: modified init files for eeasy references within src and src/objects
8a0fddf0539966d42683f8350de8d3ca34ac91fa 93e8d471761b5ec561a09abdc15339516b917186 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711917619 -0700	commit: process_video function
93e8d471761b5ec561a09abdc15339516b917186 96903059606c131f49b983ea24397d1bdab961f5 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711918038 -0700	commit: added functions to Result class
96903059606c131f49b983ea24397d1bdab961f5 510a3850da7a8182b3c0e84ab3d9f050e4154559 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711918364 -0700	commit: is changed to ==. ensures that the comparison checks if the value of model_type is equal to the string 'ConvAutoencoder', regardless of whether they are the same object in memory
510a3850da7a8182b3c0e84ab3d9f050e4154559 c636e1a4221e9e16c61b49050df51194140b76b9 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711919238 -0700	commit: actually called functions in main
c636e1a4221e9e16c61b49050df51194140b76b9 e70ae1f38ac740b8b6455e0c45c77dbb9778c350 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711919437 -0700	commit: create_model updated
e70ae1f38ac740b8b6455e0c45c77dbb9778c350 a98b122bee49aba76a9d7a27c31b4612d5aa5a05 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711919564 -0700	commit: write basic convautoencoder class


0000000000000000000000000000000000000000 73af398754ceb3cbc0870a55e37ce28cfd52c193 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711408154 -0700	clone: from https://github.com/devyn-miller/CPSC542_final_project.git


73af398754ceb3cbc0870a55e37ce28cfd52c193 dba3e8d52b24df91258d48ffb108a71797bf4c33 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711484793 -0700	fetch: fast-forward


c513330669d940c88e99616b8b7e71699964dea1 e9a79af05890f056314765d1e17849e4d2d8c4cf devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711408569 -0700	update by push
e9a79af05890f056314765d1e17849e4d2d8c4cf 23b48ecb9586c4068057c75c8d33b176da95a885 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711408612 -0700	update by push
23b48ecb9586c4068057c75c8d33b176da95a885 0c925e8dff3a07f1b0b183e4ca56180d6c15c170 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711409117 -0700	update by push
0c925e8dff3a07f1b0b183e4ca56180d6c15c170 93e8d471761b5ec561a09abdc15339516b917186 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711917620 -0700	update by push
93e8d471761b5ec561a09abdc15339516b917186 96903059606c131f49b983ea24397d1bdab961f5 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711918040 -0700	update by push
96903059606c131f49b983ea24397d1bdab961f5 510a3850da7a8182b3c0e84ab3d9f050e4154559 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711918367 -0700	update by push
510a3850da7a8182b3c0e84ab3d9f050e4154559 c636e1a4221e9e16c61b49050df51194140b76b9 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711919239 -0700	update by push
c636e1a4221e9e16c61b49050df51194140b76b9 e70ae1f38ac740b8b6455e0c45c77dbb9778c350 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711919438 -0700	update by push
e70ae1f38ac740b8b6455e0c45c77dbb9778c350 a98b122bee49aba76a9d7a27c31b4612d5aa5a05 devyn-miller <144622580+devyn-miller@users.noreply.github.com> 1711919566 -0700	update by push


#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}


#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END


#!/bin/sh

# An example hook script to validate a patch (and/or patch series) before
# sending it via email.
#
# The hook should exit with non-zero status after issuing an appropriate
# message if it wants to prevent the email(s) from being sent.
#
# To enable this hook, rename this file to "sendemail-validate".
#
# By default, it will only check that the patch(es) can be applied on top of
# the default upstream branch without conflicts in a secondary worktree. After
# validation (successful or not) of the last patch of a series, the worktree
# will be deleted.
#
# The following config variables can be set to change the default remote and
# remote ref that are used to apply the patches against:
#
#   sendemail.validateRemote (default: origin)
#   sendemail.validateRemoteRef (default: HEAD)
#
# Replace the TODO placeholders with appropriate checks according to your
# needs.

validate_cover_letter () {
	file="$1"
	# TODO: Replace with appropriate checks (e.g. spell checking).
	true
}

validate_patch () {
	file="$1"
	# Ensure that the patch applies without conflicts.
	git am -3 "$file" || return
	# TODO: Replace with appropriate checks for this patch
	# (e.g. checkpatch.pl).
	true
}

validate_series () {
	# TODO: Replace with appropriate checks for the whole series
	# (e.g. quick build, coding style checks, etc.).
	true
}

# main -------------------------------------------------------------------------

if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
then
	remote=$(git config --default origin --get sendemail.validateRemote) &&
	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
	git config --replace-all sendemail.validateWorktree "$worktree"
else
	worktree=$(git config --get sendemail.validateWorktree)
fi || {
	echo "sendemail-validate: error: failed to prepare worktree" >&2
	exit 1
}

unset GIT_DIR GIT_WORK_TREE
cd "$worktree" &&

if grep -q "^diff --git " "$1"
then
	validate_patch "$1"
else
	validate_cover_letter "$1"
fi &&

if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
then
	git config --unset-all sendemail.validateWorktree &&
	trap 'git worktree remove -ff "$worktree"' EXIT &&
	validate_series
fi


#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --


#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:


#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}


#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi


#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi


#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info


#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:


#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:


#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0


#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0


#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi


73af398754ceb3cbc0870a55e37ce28cfd52c193


a98b122bee49aba76a9d7a27c31b4612d5aa5a05


ref: refs/remotes/origin/main


dba3e8d52b24df91258d48ffb108a71797bf4c33


a98b122bee49aba76a9d7a27c31b4612d5aa5a05




import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator

class ImageAugmenter:
    def __init__(self, image_width, image_height):
        self.image_width = image_width
        self.image_height = image_height

    def augment(self, bw_image, colored_image):
        '''Applies augmentation to the images.'''
        data_gen = ImageDataGenerator(
            rotation_range=40,
            width_shift_range=0.2,
            height_shift_range=0.2,
            shear_range=0.2,
            zoom_range=0.2,
            horizontal_flip=True,
            fill_mode='nearest')

        # Assuming bw_image and colored_image are numpy arrays
        # Reshape the images to add the batch dimension
        bw_image = bw_image.reshape((1,) + bw_image.shape)
        colored_image = colored_image.reshape((1,) + colored_image.shape)

        # Apply augmentation to the black and white image
        bw_image_gen = data_gen.flow(bw_image, batch_size=1)
        # Apply augmentation to the colored image
        colored_image_gen = data_gen.flow(colored_image, batch_size=1)

        # Return the augmented images
        return next(bw_image_gen)[0], next(colored_image_gen)[0]



import os
import sys
sys.path.append(os.path.dirname(os.path.realpath(__file__)))

import tensorflow as tf
from src.objects.result import Result
from src.preprocessing import preprocess

class Predictor:
    def __init__(self, model_path):
        self.model = tf.keras.models.load_model(model_path)
        self.result = Result()

    def predict(self, input_data):
        '''Make predictions using the loaded model and input data.'''
        processed_data = preprocess(input_data)  # Use the imported function
        predictions = self.model.predict(processed_data)
        # Utilize Result class methods as needed
        self.result.save_predictions(predictions)  # Ensure this method exists in Result class
        return predictions


from augmentation import ImageAugmenter
from stack import Stack
import cv2
import os

def process_video(video_file_location, image_location='../data'):
    '''Takes in a video file location, converts the video to a 
    bunch of images and then places them into a folder. 
    (if unspecified then it places it in the data folder)
    '''
    vidcap = cv2.VideoCapture(video_file_location)
    success, image = vidcap.read()
    count = 0
    while success:
        cv2.imwrite(os.path.join(image_location, f"frame{count}.jpg"), image)     # save frame as JPEG file      
        success, image = vidcap.read()
        count += 1

def process_all_videos(directory, image_location='../data'):
    for filename in os.listdir(directory):
        if filename.endswith(".mp4"):
            video_file_location = os.path.join(directory, filename)
            process_video(video_file_location, image_location)

def color_to_bw(colored_image):
    '''Turns a colored image into a black and white image.'''
    bw_image = cv2.cvtColor(colored_image, cv2.COLOR_BGR2GRAY)
    return bw_image

def train_test_validation_split(stack, image_location='../data'):
    '''Creates train/test/validation datasets.'''
    # Example logic to split datasets
    # This is a placeholder. You need to replace it with your actual data splitting logic
    train_dataset = "your_train_dataset"
    test_dataset = "your_test_dataset"
    val_dataset = "your_val_dataset"
    stack.update_datasets(train_dataset, test_dataset, val_dataset)
    return stack

def augment_datasets(stack):
    '''Updates the datasets with augmented images.'''
    augmenter = ImageAugmenter(IMG_WIDTH=1080, IMG_HEIGHT=720)
    # Example augmentation logic. Replace with actual augmentation logic
    augmented_train_dataset = augmenter.augment(stack.train_dataset)
    augmented_test_dataset = augmenter.augment(stack.test_dataset)
    augmented_val_dataset = augmenter.augment(stack.val_dataset)
    stack.update_datasets(augmented_train_dataset, augmented_test_dataset, augmented_val_dataset)
    return stack
    

def batch_datasets(stack, BATCH_SIZE):
    '''Batches the train, test, and validation sets.'''
    # Example batching logic. Replace with actual batching logic
    batched_train_dataset = stack.train_dataset.batch(BATCH_SIZE)
    batched_test_dataset = stack.test_dataset.batch(BATCH_SIZE)
    batched_val_dataset = stack.val_dataset.batch(BATCH_SIZE)
    stack.update_datasets(batched_train_dataset, batched_test_dataset, batched_val_dataset)
    return stack
def preprocess(BATCH_SIZE = 8):
    '''This is the method called by main.ipynb.  It also calls 
    all the other functions and returns the stack which will hold 
    the finished datasets.
    '''
    stack = Stack()
    process_all_videos('/Users/devynmiller/Downloads/movies-cpsc542', '../data')
    stack = train_test_validation_split(stack)
    stack = augment_datasets(stack)
    stack = batch_datasets(stack, BATCH_SIZE)
    
    return stack

import tensorflow as tf
from tensorflow.keras import Input, Model
from tensorflow.keras.layers import Conv2D, MaxPooling2D, UpSampling2D, Concatenate, BatchNormalization
from tensorflow.keras.callbacks import EarlyStopping
import kerastuner as kt

from datetime import datetime
import matplotlib.pyplot as plt





def run_tuner(stack, c):
    '''This is a tuner.  It allows you to train up multiple models so 
    that you can figure out an architecture that works for you.
    '''
    tuner = kt.RandomSearch(
        stack.create_model,
        objective='val_accuracy',
        max_trials=c["max_trials"],  # Adjust as necessary
        executions_per_trial=c["executions_per_trial"],  # Adjust as necessary for reliability
        directory='../models',
        project_name='unet_tuning'
    )

    stop_early = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=c["patience"])

    tuner.search(
        stack.dataset_train,
        epochs=c["epochs"],  # Adjust epochs according to your need
        validation_data=stack.dataset_val,
        callbacks=[stop_early]
    )

    return tuner

def get_best_model(stack):
    '''c = {
        "max_trials": 4,
        "executions_per_trial": 1,
        "epochs": 10,
        "patience": 3
        "m": 5
    }'''
    c = {
        "max_trials": 4,
        "executions_per_trial": 1,
        "epochs": 2,
        "patience": 1,
        "m": 1
    }
    
    tuner = run_tuner(stack.dataset_train, stack.dataset_val, c)
    best_hps = tuner.get_best_hyperparameters(num_trials=1)[0]
    best_model = stack.create_model(best_hps)
    
    stop_early = EarlyStopping(monitor='val_loss', patience=c["patience"]*c["m"])

    history = best_model.fit(
        stack.dataset_train,
        epochs=c["epochs"]*c["m"],  # Train for more epochs
        validation_data=stack.dataset_val,
        callbacks=[stop_early]
    )

    datetime_str = datetime.now().strftime("%Y%m%d-%H%M%S")
    best_model.save(f'../models/model_{datetime_str}.weights.h5')
    stack.finished_model(best_model, history)
    return stack





def evaluate_model_performance(model, dataset_val):
    val_loss, val_accuracy = model.evaluate(dataset_val)
    print(f"Validation Loss: {val_loss}")
    print(f"Validation Accuracy: {val_accuracy}")

def plot_training_history(history, metric='accuracy', val_metric='val_accuracy', 
                          loss='loss', val_loss='val_loss', title_suffix=''):
    # Plot specified metric values
    plt.figure(figsize=(12, 5))
    
    # Plot for the provided metric
    plt.subplot(1, 2, 1)
    plt.plot(history.history[metric])
    plt.plot(history.history[val_metric])
    plt.title(f'Model {metric.capitalize()} {title_suffix}')
    plt.ylabel(metric.capitalize())
    plt.xlabel('Epoch')
    plt.legend(['Train', 'Validation'], loc='upper left')
    
    # Plot for the loss
    plt.subplot(1, 2, 2)
    plt.plot(history.history[loss])
    plt.plot(history.history[val_loss])
    plt.title(f'Model Loss {title_suffix}')
    plt.ylabel('Loss')
    plt.xlabel('Epoch')
    plt.legend(['Train', 'Validation'], loc='upper left')
    
    plt.tight_layout()
    plt.show()

import tensorflow as tf
from objects.result import Result
from preprocessing import preprocess 
class Validator:
    def __init__(self, model_path):
        self.model = tf.keras.models.load_model(model_path)
        self.result = Result()

    def validate(self, validation_data):
        '''Evaluates the model on the validation data.'''
        processed_data = preprocess(validation_data)  # Preprocess validation data
        evaluation_metrics = self.model.evaluate(processed_data)
        # Utilize Result class methods as needed, e.g., to save or visualize evaluation results
        self.result.save_evaluation(evaluation_metrics)  # Ensure this method exists in Result class
        return evaluation_metrics

import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))
sys.path.append(os.path.dirname(os.path.realpath(__file__)))

import json
import matplotlib.pyplot as plt
import numpy as np

class Result:
    def __init__(self):
        self.predictions = None
        self.evaluation_metrics = None

    def save_predictions(self, predictions, file_path='predictions.json'):
        '''Saves the predictions made by the model to a JSON file.'''
        self.predictions = predictions
        with open(file_path, 'w') as f:
            json.dump(predictions.tolist(), f)  # Convert numpy array to list for JSON serialization

    def save_evaluation(self, evaluation_metrics, file_path='evaluation_metrics.json'):
        '''Saves the evaluation metrics obtained during validation to a JSON file.'''
        self.evaluation_metrics = evaluation_metrics
        with open(file_path, 'w') as f:
            json.dump(evaluation_metrics, f)

    def plot_predictions(self, sample_index=0):
        '''Plots the predictions for a given sample index.'''
        if self.predictions is not None:
            plt.figure(figsize=(10, 4))
            plt.plot(self.predictions[sample_index])
            plt.title(f'Predictions for Sample {sample_index}')
            plt.ylabel('Prediction Value')
            plt.xlabel('Prediction Index')
            plt.show()
        else:
            print("No predictions to plot.")


from data import Data
from src.objects.architecture.conv_autoencoder import ConvAutoencoder

class Stack:
    '''This class holds the data, model, architecture, and results
    '''
    def __init__(self):
        self.data = Data()
        
        self.architecture = None
        self.model = None
        
        self.final_model = None
        self.final_history = None
        
    def update_datasets(self, train_dataset, test_dataset, val_dataset):
        '''Updates variables dataset_train, test_dataset, val_dataset in stack.
        '''
        self.train_dataset = train_dataset
        self.test_dataset = test_dataset
        self.val_dataset = val_dataset
        
    def create_model(self, hp, model_type='ConvAutoencoder'):
        '''Creates a ML model using the given model type and updates self.model
        '''
        if model_type == 'ConvAutoencoder':
            self.model = ConvAutoencoder().create(hp)
        return self.model
    
    def finished_model(self, final_model, final_history):
        '''Saves the final model and history for future use.'''
        self.final_model = final_model
        self.final_history = final_history
        

        

class Data:
    '''This class holds the data: train_dataset, test_dataset, val_dataset
    '''
    def __init__(self):
        self.train_dataset = None
        self.test_dataset = None
        self.val_dataset = None
        
    def update_datasets(self, train_dataset, test_dataset, val_dataset):
        '''Updates variables dataset_train, test_dataset, val_dataset in stack.
        '''
        self.train_dataset = train_dataset
        self.test_dataset = test_dataset
        self.val_dataset = val_dataset

import tensorflow as tf
from tensorflow.keras import layers, Model

class ConvAutoencoder:
    '''Defines the architecture of a convolutional autoencoder model.'''

    def create(self, hp):
        '''Creates and returns a convolutional autoencoder model.
        
        Args:
            hp: A dictionary or an object containing hyperparameters.
        '''
        # Encoder
        inputs = tf.keras.Input(shape=(hp['input_shape']))
        x = layers.Conv2D(filters=hp['encoder_filters'], kernel_size=(3, 3), activation='relu', padding='same')(inputs)
        x = layers.MaxPooling2D(pool_size=(2, 2), padding='same')(x)
        
        # Decoder
        x = layers.Conv2D(filters=hp['decoder_filters'], kernel_size=(3, 3), activation='relu', padding='same')(x)
        x = layers.UpSampling2D(size=(2, 2))(x)
        outputs = layers.Conv2D(filters=hp['output_channels'], kernel_size=(3, 3), activation='sigmoid', padding='same')(x)
        
        # Model
        model = Model(inputs, outputs, name='ConvAutoencoder')
        
        model.compile(optimizer='adam', loss='binary_crossentropy')
        
        return model



